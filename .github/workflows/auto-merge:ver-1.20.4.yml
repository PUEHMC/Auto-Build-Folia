# name: Auto Merge Upstream ver/1.20.4

# on:
#   schedule:
#     - cron: "0 0 * * *"
#   workflow_dispatch:

# jobs:
#   auto-merge:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3
#         with:
#           token: ${{ secrets.RELEASE_KEY }}

#       - name: Set up Git
#         run: |
#           git config user.name "${{ secrets.NAME }}"
#           git config user.email "${{ secrets.EMAIL }}"
#           git remote add upstream https://github.com/PaperMC/Folia

#       - name: Fetch upstream changes
#         run: git fetch upstream

#       - name: Switch to branch
#         run: git checkout -b ver/1.20.4

#       - name: Merge upstream changes
#         run: |
#           git merge upstream/master --allow-unrelated-histories -Xtheirs

#       - name: Configure Git with Secret
#         run: |
#           git config --global user.signingkey ${{ secrets.RELEASE_KEY }}

#       - name: Push changes
#         run: git push -f origin ver/1.20.4

#       - name: Cleanup
#         run: |
#           git remote remove upstream

name: '[V2]Auto Merge Upstream ver/1.20.4'

on:
  schedule:
    - cron: "0 * * * *" # 每小时执行一次 检查上游是否有更新
  workflow_dispatch:

jobs:
  auto-merge-and-check-updates:
    runs-on: ubuntu-latest
    env:
      UPSTREAM: 'https://github.com/PaperMC/Folia' # 上游仓库地址
      UPSTREAM_BRANCH: 'master' # 上游分支变量
      LOCAL_BRANCH: 'ver/1.20.4' # 本地分支变量

    steps:
      - name: Checkout the current repo
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.RELEASE_KEY }}

      - name: Set up Git
        run: |
          git config user.name "${{ secrets.NAME }}"
          git config user.email "${{ secrets.EMAIL }}"
          git remote add upstream ${{ env.UPSTREAM }}

      - name: Fetch and check for updates
        run: |
            git fetch upstream
            echo "${{ env.LOCAL_BRANCH }}"
            git branch --all
            if git branch --all | grep -q "remotes/upstream/${{ env.LOCAL_BRANCH }}"; then
              git checkout ${{ env.LOCAL_BRANCH }}
              echo "已存在分支 切换到本地分支 检测哈希"

              UPSTREAM_HASH=$(git rev-parse refs/remotes/upstream/${{ env.UPSTREAM_BRANCH }})
              echo "[远程分支哈希] UPSTREAM_HASH=$UPSTREAM_HASH"
              echo "UPSTREAM_HASH=$UPSTREAM_HASH" >> $GITHUB_ENV
              
              CURRENT_HASH=$(git rev-parse ${{ env.LOCAL_BRANCH }})
              echo "[本地分支哈希] CURRENT_HASH=$CURRENT_HASH"
              echo "CURRENT_HASH=$CURRENT_HASH" >> $GITHUB_ENV
              
              if [ "$UPSTREAM_HASH" != "$CURRENT_HASH" ]; then
                echo "updated=true" >> $GITHUB_ENV
                echo "[哈希检测] 检测到远程存储库已更新 执行更新分支"
              else
                echo "No updates found in the upstream repository."
              fi
            else
              echo "不存在分支 创建本地分支 不检测哈希"
              git checkout --orphan ${{ env.LOCAL_BRANCH }} && \
              if [ "$(ls -A)" ]; then
                echo "目录不为空 删除所有文件"
                git rm -rf .
              fi
              echo "updated=true" >> $GITHUB_ENV
              echo "[哈希检测] 检测到远程存储库已更新 执行更新分支"
            fi
        
      # 如果上游有更新，则合并这些更新
      - name: Merge and push if updated
        if: env.updated == 'true'
        run: |
          git merge upstream/${{ env.UPSTREAM_BRANCH }}
          git config --global user.signingkey ${{ secrets.RELEASE_KEY }}
          git push origin ${{ env.LOCAL_BRANCH }}

      # 清理操作，删除添加的远程仓库
      - name: Cleanup
        run: |
          git remote remove upstream
